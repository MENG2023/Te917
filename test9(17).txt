import java.util.*;
public class Test {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        Integer a = stack.pop();
        System.out.println(a);
        Integer b = stack.peek();
        System.out.println(b);
        System.out.println(stack.size());
        System.out.println(stack.isEmpty());
    }

    public static void main2(String[] args) {
        MyStack stack = new MyStack();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        Integer a = stack.pop();//3
        System.out.println(a);
        Integer b = stack.peek();
        System.out.println(b);//2
        Integer b2 = stack.peek();
        System.out.println(b2);//2
    }

public boolean isPopOrder(int[] pushA,int [] popA) {
    Stack<Integer> stack = new Stack<>();
    int j = 0;
    for (int i = 0; i < pushA.length; i++) {
        stack.push(pushA[i]);
        while (j < popA.length && !stack.empty() && stack.peek().equals(popA[j])) {
            stack.pop();
            j++;
        }
    }
    return stack.empty();
}

}
//抛出的异常

public class EmptyException extends RuntimeException{
    public EmptyException() {
    }
    public EmptyException(String message){
        super(message);
    }
}

测试
import java.util.*;
public class Test {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        Integer a = stack.pop();
        System.out.println(a);
        Integer b = stack.peek();
        System.out.println(b);
        System.out.println(stack.size());
        System.out.println(stack.isEmpty());
    }

    public static void main2(String[] args) {
        MyStack stack = new MyStack();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        Integer a = stack.pop();//3
        System.out.println(a);
        Integer b = stack.peek();
        System.out.println(b);//2
        Integer b2 = stack.peek();
        System.out.println(b2);//2
    }

public boolean isPopOrder(int[] pushA,int [] popA) {
    Stack<Integer> stack = new Stack<>();
    int j = 0;
    for (int i = 0; i < pushA.length; i++) {
        stack.push(pushA[i]);
        while (j < popA.length && !stack.empty() && stack.peek().equals(popA[j])) {
            stack.pop();
            j++;
        }
    }
    return stack.empty();
}

}


